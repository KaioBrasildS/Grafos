import networkx as nx
import random
import matplotlib.pyplot as plt

class FirePreventionandFight:
    
    def __init__(
                self,
                num_vertices,
                num_arestas,
                postos_brigadistas,
                pontos_agua,
                capacidade_caminhoes,
                consumo_por_fogo=1
                ):
        """
        Inicializa o sistema de combate a inc√™ndios com um grafo representando
        o ambiente, os postos dos brigadistas, pontos de √°gua, capacidade dos
        caminh√µes e consumo de √°gua por foco de inc√™ndio.

        Par√¢metros:
        - num_vertices (int): n√∫mero total de v√©rtices no grafo.
        - num_arestas (int): n√∫mero de arestas (conex√µes entre v√©rtices).
        - postos_brigadistas (list[int]): v√©rtices com postos de brigadistas.
        - pontos_agua (list[int]): v√©rtices com fontes de √°gua.
        - capacidade_caminhoes (int): capacidade de √°gua por caminh√£o.
        - consumo_por_fogo (int): quantidade de √°gua consumida por foco de fogo.
        """
        self.grafo = nx.Graph()
        self.consumo_por_fogo = consumo_por_fogo
        self.capacidade_caminhoes = capacidade_caminhoes
        self.brigadistas = {}
        self.postos_brigadistas = set(postos_brigadistas)

        for i in range(num_vertices):
            self.grafo.add_node(
                i,
                fogo=False,
                agua=False,
                queimado=False,
                posto_brigadista=(i in self.postos_brigadistas)
            )

        arestas_adicionadas = set()
        while len(arestas_adicionadas) < num_arestas:
            u, v = random.sample(range(num_vertices), 2)
            if (u, v) not in arestas_adicionadas and (v, u) not in arestas_adicionadas:
                peso = random.randint(1, 10)
                self.grafo.add_edge(u, v, weight=peso)
                arestas_adicionadas.add((u, v))

        for p in postos_brigadistas:
            self.brigadistas[p] = (p, self.capacidade_caminhoes)
            self.grafo.nodes[p]['agua'] = True

        for p in pontos_agua:
            self.grafo.nodes[p]['agua'] = True

        self.fogo_ativo = []
        self.fogos_apagados = []
        self.pos = nx.spring_layout(self.grafo)


    def iniciar_fogo(self, inicio):
        """
        Inicia um foco de inc√™ndio em um v√©rtice do grafo, desde que o local
        n√£o possua √°gua, n√£o tenha sido queimado anteriormente e n√£o seja um
        posto de brigadistas.

        Par√¢metros:
        - inicio (int): √≠ndice do v√©rtice onde o fogo deve come√ßar.

        A fun√ß√£o verifica se √© poss√≠vel iniciar o fogo no local:
        - N√£o pode iniciar fogo em locais com fonte de √°gua.
        - N√£o pode iniciar fogo em locais j√° queimados.
        - N√£o pode iniciar fogo em postos de brigadistas.
        Caso o local seja v√°lido, marca o v√©rtice com fogo e adiciona √† lista
        de focos ativos.
        """
        # N√£o inicia fogo em locais inv√°lidos
        if (self.grafo.nodes[inicio]['agua'] or
            self.grafo.nodes[inicio]['queimado'] or
            self.grafo.nodes[inicio]['posto_brigadista']):
            return  

        # Marca o v√©rtice como com fogo ativo
        self.fogo_ativo.append(inicio)
        self.grafo.nodes[inicio]['fogo'] = True

    def propagar_fogo(self):
        """
        Propaga o fogo dos v√©rtices atualmente em chamas para seus vizinhos,
        seguindo algumas condi√ß√µes.

        A propaga√ß√£o s√≥ ocorre se o v√©rtice vizinho:
        - N√£o estiver em chamas.
        - N√£o tiver fonte de √°gua.
        - N√£o tiver sido queimado anteriormente.
        - N√£o for um posto de brigadistas.

        Os novos focos s√£o marcados e adicionados √† lista de fogo ativo.
        """
        novos_focos = []

        # Itera sobre os v√©rtices com fogo ativo
        for v in self.fogo_ativo:
            # Verifica todos os vizinhos do v√©rtice em chamas
            for vizinho in self.grafo.neighbors(v):
                # Se o vizinho for um local v√°lido para pegar fogo
                if (not self.grafo.nodes[vizinho]['fogo'] and
                    not self.grafo.nodes[vizinho]['agua'] and
                    not self.grafo.nodes[vizinho]['queimado'] and
                    not self.grafo.nodes[vizinho]['posto_brigadista']):
                    
                    # Marca o vizinho como novo foco de fogo
                    novos_focos.append(vizinho)
                    self.grafo.nodes[vizinho]['fogo'] = True

        # Adiciona os novos focos √† lista de fogo ativo
        self.fogo_ativo.extend(novos_focos)

    def apagar_fogo(self, vertice):
        """
        Apaga o fogo em um v√©rtice espec√≠fico do grafo.

        Par√¢metros:
        - vertice (int): √≠ndice do v√©rtice onde o fogo ser√° apagado.

        A fun√ß√£o realiza as seguintes a√ß√µes:
        - Marca o v√©rtice como n√£o estando mais em chamas.
        - Marca o v√©rtice como queimado (registro do inc√™ndio).
        - Remove o v√©rtice da lista de focos de fogo ativos.
        - Adiciona o v√©rtice √† lista de fogos apagados.
        """
        self.grafo.nodes[vertice]['fogo'] = False
        self.grafo.nodes[vertice]['queimado'] = True
        self.fogo_ativo.remove(vertice)
        self.fogos_apagados.append(vertice)

    def caminho_mais_curto(self, origem, destino):
        """
        Calcula o caminho mais curto entre dois v√©rtices no grafo,
        usando o algoritmo dijkstra que leva
        em considera√ß√£o os pesos das arestas.

        Par√¢metros:
        - origem (int): v√©rtice de partida.
        - destino (int): v√©rtice de chegada.

        Retorna:
        - Lista com os v√©rtices do caminho mais curto, incluindo origem e
        destino, ou None se n√£o houver caminho entre os dois v√©rtices.
        """
        try:
            return nx.shortest_path(
                self.grafo,
                source=origem,
                target=destino,
                weight='weight'
            )
        except nx.NetworkXNoPath:
            return None  # Retorna None se n√£o houver caminho poss√≠vel

    def enviar_brigadistas(self):
        """
        Move os brigadistas pelo grafo para combater os focos de inc√™ndio
        ou reabastecer √°gua, conforme necess√°rio.

        A l√≥gica funciona da seguinte forma:
        - Se n√£o h√° fogo ativo, a fun√ß√£o retorna imediatamente.
        - Para cada brigadista:
            - Se estiver sem √°gua, ele √© enviado ao ponto de reabastecimento
            mais pr√≥ximo.
            - Caso tenha √°gua, ele √© enviado ao foco de fogo mais pr√≥ximo.
        - A posi√ß√£o e a quantidade de √°gua do brigadista s√£o atualizadas
        conforme ele se move.

        Observa√ß√µes:
        - A movimenta√ß√£o √© baseada no caminho mais curto (menor peso).
        - Os focos ativos e pontos de reabastecimento s√£o din√¢micos.
        """
        #  Nenhum fogo ativo, nenhuma a√ß√£o necess√°ria
        if not self.fogo_ativo:
            return  

        for brigadista, (posicao_atual, agua) in self.brigadistas.items():
            # Se o brigadista est√° sem √°gua, vai reabastecer
            if agua < self.consumo_por_fogo:
                ponto_reabastecimento = min(
                    (n for n in self.grafo.nodes if self.grafo.nodes[n]['agua']),
                    key=lambda p: nx.shortest_path_length(
                        self.grafo, posicao_atual, p, weight='weight'
                    ),
                    default=None
                )

                if ponto_reabastecimento:
                    print(
                        f"üíß Brigadista {brigadista} sem √°gua indo reabastecer "
                        f"em {ponto_reabastecimento}."
                    )
                    self.brigadistas[brigadista] = (
                        ponto_reabastecimento, self.capacidade_caminhoes
                    )
                continue  # Pula para o pr√≥ximo brigadista

            # Busca o foco de fogo mais pr√≥ximo (excluindo onde ele j√° est√°)
            foco_mais_proximo = min(
                (f for f in self.fogo_ativo if f != posicao_atual),
                key=lambda f: nx.shortest_path_length(
                    self.grafo, posicao_atual, f, weight='weight'
                ),
                default=None
            )

            # Move at√© o foco de fogo mais pr√≥ximo
            if foco_mais_proximo:
                caminho = self.caminho_mais_curto(posicao_atual, foco_mais_proximo)
                if caminho:
                    self.brigadistas[brigadista] = self.deslocar_brigadista(
                        brigadista, caminho, agua
                    )

    def deslocar_brigadista(self, brigadista, caminho, agua):
        """
        Move o brigadista ao longo de um caminho at√© o destino, podendo 
        reabastecer √°gua ou apagar fogo no final do trajeto.

        Par√¢metros:
        - brigadista (int): identificador do brigadista.
        - caminho (list[int]): lista de v√©rtices que representam o trajeto.
        - agua (int): quantidade atual de √°gua do brigadista.

        Retorno:
        - Tupla (nova_posi√ß√£o, nova_quantidade_agua) representando o estado
        atualizado do brigadista ap√≥s o deslocamento.

        L√≥gica:
        - Se o caminho for vazio, o brigadista permanece na posi√ß√£o atual.
        - Durante o percurso (exceto destino), se passar por um ponto de 
        √°gua, reabastece e termina o movimento ali.
        - Se o destino estiver em chamas, o fogo √© apagado e a √°gua consumida.
        - Se n√£o houver fogo no destino, apenas atualiza a posi√ß√£o.
        """
        if not caminho:
            return self.brigadistas[brigadista]

        posicao_atual = caminho[0]
        destino = caminho[-1]
        caminho_percorrido = caminho[1:-1]

        print(
            f"üöí Brigadista {brigadista} ({agua}L) saindo de {posicao_atual} "
            f"para apagar fogo em {destino}. Passou por {caminho_percorrido}"
        )

        # Reabastecimento durante o trajeto (antes do destino)
        for v in caminho_percorrido:
            if self.grafo.nodes[v]['agua']:
                print(f"üíß Brigadista {brigadista} reabastecendo em {v}.")
                return (v, self.capacidade_caminhoes)

        # Apaga o fogo se ainda estiver ativo no destino
        if self.grafo.nodes[destino]['fogo']:
            self.apagar_fogo(destino)
            agua -= self.consumo_por_fogo
            print(
                f"üî• Fogo apagado em {destino} pelo brigadista {brigadista} "
                f"(Restante: {agua}L)."
            )
            return (destino, agua)

        return (destino, agua)


    def simular(self, inicio_fogo):
        """
        Inicia e executa a simula√ß√£o da propaga√ß√£o e combate ao fogo.

        Par√¢metro:
        - inicio_fogo (int): v√©rtice onde o fogo come√ßa.

        L√≥gica:
        - Inicia o fogo no v√©rtice especificado.
        - Exibe o estado inicial do grafo.
        - Enquanto houver fogo ativo:
            * Propaga o fogo para os vizinhos.
            * Envia brigadistas para tentar apag√°-lo.
            * Exibe os estados atualizados do grafo.
        - Ao final, imprime os v√©rtices onde os fogos foram apagados.
        """
        self.iniciar_fogo(inicio_fogo)

        print("üñºÔ∏è Exibindo estado inicial do grafo...")
        self.desenhar_grafo(1)

        estado = 2
        while self.fogo_ativo:
            self.propagar_fogo()

            # Exibe fogos ativos antes da atua√ß√£o dos brigadistas
            print(
                "üî• Fogo ativo nos v√©rtices antes da a√ß√£o dos brigadistas: "
                f"{sorted(self.fogo_ativo)}"
            )

            self.enviar_brigadistas()

            # Exibe fogos ativos ap√≥s a atua√ß√£o dos brigadistas
            print(
                "üî• Fogo ativo nos v√©rtices ap√≥s a a√ß√£o dos brigadistas: "
                f"{sorted(self.fogo_ativo)}"
            )

            self.desenhar_grafo(estado)
            estado += 1

        print(
            f"‚úÖ Simula√ß√£o conclu√≠da. Fogos apagados: "
            f"{sorted(self.fogos_apagados)}"
        )
            
    def desenhar_grafo(self, estado):
        """
        Exibe graficamente o estado atual do grafo durante a simula√ß√£o.

        Par√¢metro:
        - estado (int): n√∫mero que representa o est√°gio atual da simula√ß√£o.

        L√≥gica:
        - Define a cor dos n√≥s com base no seu estado:
            * üî¥ Vermelho: est√° pegando fogo
            * üü° Amarelo: ocupado por um brigadista
            * üîµ Azul: possui √°gua ou √© posto de brigadista
            * ‚ö´ Cinza: j√° foi queimado
            * üü¢ Verde: est√° seguro
        - Desenha o grafo com seus n√≥s, arestas e pesos.
        - Exibe o gr√°fico por 1.5 segundos.
        """
        plt.clf()
        node_colors = []
        for n in self.grafo.nodes:
            if self.grafo.nodes[n]['fogo']:
                node_colors.append('red')
            elif any(self.brigadistas[b][0] == n for b in self.brigadistas):
                node_colors.append('yellow')
            elif (self.grafo.nodes[n]['agua'] or
                self.grafo.nodes[n]['posto_brigadista']):
                node_colors.append('blue')
            elif self.grafo.nodes[n]['queimado']:
                node_colors.append('gray')
            else:
                node_colors.append('green')

        plt.figure(figsize=(10, 8))
        nx.draw(
            self.grafo,
            self.pos,
            with_labels=True,
            node_size=500,
            node_color=node_colors,
            font_size=10
        )

        edge_labels = nx.get_edge_attributes(self.grafo, 'weight')
        nx.draw_networkx_edge_labels(
            self.grafo,
            self.pos,
            edge_labels=edge_labels,
            font_size=9
        )

        plt.title(f"Estado Atual do Grafo [estado {estado}]")
        plt.draw()
        plt.pause(1.5)
